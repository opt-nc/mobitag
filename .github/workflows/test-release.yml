name: 🎯 Test & release

on:
  push:
    branches: [main, develop]

permissions:
  id-token: write
  contents: write
  attestations: write
  pull-requests: write
  issues: write

jobs:
  test-release:
    name: 🎯 Test & Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      - name: 🚀 Setup Go
        uses: actions/setup-go@v6.0.0
      - name: 🧪 Generate the gif with vhs
        if: github.actor != 'dependabot[bot]'
        env:
          OPTNC_MOBITAGNC_API_KEY: ${{ secrets.OPTNC_MOBITAGNC_API_KEY }}
          MOBILIS_NUMBER: ${{ secrets.MOBILIS_NUMBER }}
        run: |
          sudo apt update
          sudo apt install -y ffmpeg ttyd
          go install github.com/charmbracelet/vhs@latest
          vhs mobitag-auth.tape
      - uses: stefanzweifel/git-auto-commit-action@v6
        if: github.actor != 'dependabot[bot]'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          commit_message: "feat: Update generated VHS GIF"
          commit_user_name: vhs-action 📼
          commit_user_email: actions@github.com
          commit_author: vhs-action 📼 <actions@github.com>
          file_pattern: '*.gif *.webm'
      - name: 📦 Semantic Release
        id: release
        uses: cycjimmy/semantic-release-action@9cc899c47e6841430bbaedb43de1560a568dfd16
        with:
          extra_plugins: |
            @semantic-release/exec
            @semantic-release/git
            @semantic-release/release-notes-generator
            conventional-changelog-conventionalcommits
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: anchore/sbom-action/download-syft@f8bdd1d8ac5e901a77a92f111440fdb1b593736b # installs syft
      - name: Run GoReleaser
        if: steps.release.outputs.new_release_published == 'true' # Run only if a new release was published
        uses: goreleaser/goreleaser-action@e435ccd777264be153ace6237001ef4d979d3a7a
        with:
          # either 'goreleaser' (default) or 'goreleaser-pro'
          distribution: goreleaser
          # 'latest', 'nightly', or a semver
          version: '~> v2'
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUBLIC_HOMEBREW_TAP_TOKEN: ${{ secrets.PUBLIC_HOMEBREW_TAP_TOKEN }}
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a
        with:
          subject-checksums: ./dist/checksums.txt
        

      - name: 👍 Merge main back to dev
        if: github.ref == 'refs/heads/main' && steps.release.outputs.new_release_published == 'true'
        run: |
            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"
            git fetch
            git checkout develop
            git branch --set-upstream-to=origin/develop develop
            git pull
            git merge --no-ff main -m "Auto-merge main back to dev"
            git push

      - name: 🧹 Delete pre-releases
        if: github.ref == 'refs/heads/main' && steps.release.outputs.new_release_published == 'true'
        uses: dev-drprasad/delete-older-releases@dfbe6be2a006e9475dfcbe5b8d201f1824c2a9fe
        with:
          delete_tag_pattern: develop
          keep_latest: 0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
